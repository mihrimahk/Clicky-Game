{"version":3,"sources":["components/ImageCard/ImageCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","registerServiceWorker.js","index.js"],"names":["ImageCard","props","react_default","a","createElement","className","alt","name","src","image","onClick","handleClick","id","Nav","yourGuess","yourScore","highScore","Wrapper","children","Title","App","state","starters","map","starter","Object","objectSpread","chosenPokemon","_this","find","console","log","clicked","shuffledStarters","sort","b","Math","random","setState","handleIncrement","alert","_this2","this","components_Nav_Nav","components_Wrapper_Wrapper","components_Title_Title","components_ImageCard_ImageCard","key","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8ce013ff.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./ImageCard.css\";\n\nconst ImageCard = props => (\n    <div className =\"card\">\n        <div className=\"img-container\">\n            <img className=\"img-thumbnail img-responsive\" alt={props.name} src={props.image}\n            onClick={() => props.handleClick(props.id)}/>\n        </div>\n    </div>\n);\n\nexport default ImageCard;","import React from \"react\";\nimport \"./Nav.css\";\n\nconst Nav = props => (\n\n<nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <h3 className=\"navbar-text\">Clicky Game</h3>\n    <span className=\"navbar-text your-guess\">{props.yourGuess}</span>\n    <span className=\"navbar-text your-score\">Your Score: {props.yourScore}</span>\n    <span className=\"navbar-text high-score\">High Score: {props.highScore}</span>\n</nav>\n\n);\n\nexport default Nav;","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./Title.css\";\n\nconst Title = props => <h3 className=\"title\">{props.children}</h3>;\n\nexport default Title;","import React, { Component } from 'react';\nimport ImageCard from \"./components/ImageCard\";\nimport starters from \"./starters.json\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport './App.css';\n\nclass App extends Component {\n\n  state = {\n    starters: starters.map(starter => ({...starter})),\n    yourScore: 0,\n    highScore: 0,\n    yourGuess: \"\",\n  };\n\n\n\n  handleClick = id => {\n\n    const chosenPokemon = this.state.starters.find(name => name.id === id);\n    console.log(chosenPokemon);\n\n    if (chosenPokemon.clicked === false) { \n      chosenPokemon.clicked = true;\n      console.log(chosenPokemon);\n      const shuffledStarters = this.state.starters.sort((a,b) => 0.5 - Math.random());\n      this.setState({ starters: shuffledStarters })\n      this.handleIncrement();\n      console.log(this.state.yourScore);\n    }\n\n    else {\n\n      if (this.state.yourScore === 21) {\n        alert(\"Congratulations! You won the game!\");\n        this.setState({highScore: this.state.yourScore, \n                      yourScore: 0, \n                      starters: starters.map(starter => ({...starter}))});\n      }\n\n      else if (this.state.yourScore > this.state.highScore) {\n        alert(\"Game Over! Congrats on your new high score!\")\n        this.setState({highScore: this.state.yourScore,\n                      yourScore: 0, \n                      starters: starters.map(starter => ({...starter}))});\n      }\n\n      else {\n        alert(\"Oops, you already clicked that one! That's game over!\");\n        this.setState({yourScore: 0,\n                      starters: starters.map(starter => ({...starter}))});\n      }\n    }\n\n  };\n\n  handleIncrement = () => {\n    this.setState({ yourScore: this.state.yourScore + 1 });\n    console.log(this.state.yourScore);\n  };\n\n\n  render() { \n    return (\n    <div>\n    <Nav\n    yourScore={this.state.yourScore}\n    highScore={this.state.highScore}\n    yourGuess={this.state.yourGuess}\n    />\n    <Wrapper>\n    <Title>Click each starter Pokemon once to earn points.\n    <br></br>\n    Click the same Pokemon twice and it's game over.\n    </Title>\n      {this.state.starters.map(starter => (\n        <ImageCard\n          id={starter.id}\n          key={starter.id}\n          name={starter.name}\n          image={starter.image}\n          clicked={starter.clicked} //\n          handleClick={this.handleClick}\n        />\n      ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}